// @File:     generator.go
// @Created:  2020-03-21 03:14:43
// @Modified: 2020-03-24 17:04:05
// @Author:   Antonio Escalera
// @Commiter: Antonio Escalera
// @Mail:     aj@angelofdeauth.host
// @Copy:     Copyright Â© 2020 Antonio Escalera <aj@angelofdeauth.host>

//+build ignore

// figure out how to use filepath.Dir() to have multiple boxes

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/klauspost/compress/zstd"
)

const (
	blobFileName string = "blob.go"
	embedFolder  string = "../../tmpl"
)

// config is the generator's configuration structure.
// It describes the desired state of the blob file to the generator.
// When executed, the generator attempts to rectify the state of the blob file with the desired state described in the config object.
type config struct {
	boxConfigs []boxConfig
}

// boxConfig is the configuration for a box.
// Each box is contained within its own EmbedBox object.
type boxConfig struct {
	name string
	dirs []dir
}

// dir is a directory.
// It is easiest to represent as a bucket (shaped like a U) where the `name`d path is the bottom, and every subdirectory is contained within.
// files matching the `filter` will not be included in the dir's contents.
type dir struct {
	contents map[string][]byte // automatically populated, DO NOT USE.
	name     string
	filter   string
}

var genConf = config{
	boxConfigs: []boxConfig{
		{
			name: "Template",
			dirs: []dir{
				{
					name:   "/pkg/tmpl",
					filter: `^[^\.].*$`, // don't box hidden files or directories
				},
			},
		},
	},
}

var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package box

// Code generated by go generate; DO NOT EDIT.

func init() {
	{{- range _, $box := . }}
	    {{ $box.name }} := newEmbedBox()
	{{- range _, $dir := $box.dirs }}
	{{- range $name, $file := $dir.contents }}
    	{{ $box.name }}.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}`),
)

// EmbedEncoder is a writer that caches compressors.
var EmbedEncoder, _ = zstd.NewWriter(nil)

// compress a byte buffer
func compress(ee zstd.Encoder, b []byte) []byte {
	return ee.EncodeAll(b, make([]byte, 0, len(b)))
}

func fmtByteSlice(b []byte) string {
	builder := strings.Builder{}

	c := compress(EmbedEncoder, b)

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func main() {
	for i, v := range genConf.boxConfigs {
		// Checking directory with files
		if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
			log.Fatal("Static directory does not exists!")
		}

		// Create map for filenames
		configs := make(map[string][]byte)

		// Walking through embed directory
		err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
			relativePath := filepath.ToSlash(strings.TrimPrefix(path, embedFolder))

			if info.IsDir() {
				// Skip directories
				log.Println(path, "is a directory, skipping...")
				return nil
			} else {
				// If element is a simple file, embed
				log.Println(path, "is a file, packing in...")

				b, err := ioutil.ReadFile(path)
				if err != nil {
					// If file not reading
					log.Printf("Error reading %s: %s", path, err)
					return err
				}

				// Add file name to map
				configs[relativePath] = b
			}

			return nil
		})
		if err != nil {
			log.Fatal("Error walking through embed directory:", err)
		}

		// Create blob file
		f, err := os.Create(blobFileName)
		if err != nil {
			log.Fatal("Error creating blob file:", err)
		}
		defer f.Close()

		// Create buffer
		builder := &bytes.Buffer{}

		// Execute template
		if err = tmpl.Execute(builder, configs); err != nil {
			log.Fatal("Error executing template", err)
		}

		// Formatting generated code
		data, err := format.Source(builder.Bytes())
		if err != nil {
			log.Fatal("Error formatting generated code", err)
		}

		// Writing blob file
		if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
			log.Fatal("Error writing blob file", err)
		}
	}
}
